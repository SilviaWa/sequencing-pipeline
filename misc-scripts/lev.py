"""
Author: Jason Knight
Date: January 2013

Performs an analysis on the Levenshtein distances between the undetermined
reads barcodes and the known barcodes that were used on that lane.

Takes the path to a file containing the fastq read names (which include
barcodes) as the first argument. This can be generated by the following bash command:

samtools view -S Aligned.out.sam| cut -f1 | xargs -I {} -n1 grep {} \
/mnt/data1/lampe-test-1/renamed/lane1_Undetermined_L001_R1.fastq | tee barcodes
"""
import sys
from collections import Counter

def lev1(s1, s2):
    if len(s1) < len(s2):
        return lev1(s2, s1)
 
    # len(s1) >= len(s2)
    if len(s2) == 0:
        return len(s1)
 
    previous_row = xrange(len(s2) + 1)
    for i, c1 in enumerate(s1):
        current_row = [i + 1]
        for j, c2 in enumerate(s2):
            insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer
            deletions = current_row[j] + 1       # than s2
            substitutions = previous_row[j] + (c1 != c2)
            current_row.append(min(insertions, deletions, substitutions))
        previous_row = current_row
 
    return previous_row[-1]

erccpos=[   'GCCAAT',
            'CTTGTA']

erccneg= [  'CAGATC',
            'CGATGT',
            'GTGAAA']

poscount = Counter()
negcount = Counter()
diffcount = Counter()

sum_eq = 0
sum_neg = 0
sum_pos = 0

with open(sys.argv[1],'r') as fid:
    for i, line in enumerate(fid.readlines()):
        curr = line.strip()[-6:]
        posel = min([lev1(curr,x) for x in erccpos])
        negel = min([lev1(curr,x) for x in erccneg])

        poscount[posel] += 1
        negcount[negel] += 1
        diffcount[negel-posel] += 1

        #if i % 1000 == 0:
            #print "%8d: pos, neg: %d %d" % (i, posel, negel)
        if negel == posel:
            sum_eq +=1
        elif negel < posel:
            sum_neg +=1
        else:
            sum_pos +=1

print "                \t%8s\t %s" % ("Reads", "Ratio to total")
print "Equidistant:    \t%8d\t %.3f" % (sum_eq, sum_eq/float(i))
print "Closer to ERCC-:\t%8d\t %.3f" % (sum_neg, sum_neg/float(i))
print "Closer to ERCC+:\t%8d\t %.3f" % (sum_pos, sum_pos/float(i))
print "Total %d" % i
print ""
print "Histogram of minimum ERCC- distances for all reads: "
print negcount.items()
print ""
print "Histogram of minimum ERCC+ distances for all reads: "
print poscount.items()
print ""
print "Histogram of difference (ERCC- - ERCC+) of minimum distances for all reads: "
print diffcount.items()

